#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
#
# *** GOBOLINUX GRAPHICAL/CONSOLE INSTALLER ***
#
# - Andre Detsch {detsch gobolinux.org}
#   (Astract API, pt_BR text, Qt API Implementation, gobolinux wizard & installation code)
#
#
# - Hisham H. Muhammad {lode gobolinux.org}
#   (Abstract API, en_US text, Curses API implementation)
#
#

from wizard import *
import sys, os, string, os.path
from sys import *
import crypt
import  MouseInfo

sys.path = ['GraphicalTail'] + sys.path

shared = "/Programs/Installer/Current/Shared/Installer/"

###############################################################################
###############################################################################
#               CHOOSING DISPLAY MODE
###############################################################################
###############################################################################

if ('qt' in sys.argv) :
    mode = 'qt'
elif ('curses' in sys.argv) :
    mode = 'curses'
else :
	if os.environ.has_key("DISPLAY") :
		mode = 'qt'
	else :
		mode = 'curses'

try:
	if mode == 'qt' :
		from qtwizard import *
		Wizard = AbsQtWizard
		Screen = AbsQtScreen
		#QToolTip.setWakeUpDelay(200)
except:
	mode = 'curses'

if mode == 'curses' :
	from cwizard import *
	Wizard = AbsCursesWizard
	Screen = AbsCursesScreen
elif mode == 'qt' :
	pass
else :
	print 'Undefined mode:',mode
	sys.exit(1)


###############################################################################
###############################################################################
#               INSTALL OR DEBUG
###############################################################################
###############################################################################

reallyInstall = ('install' in sys.argv)


###############################################################################
###############################################################################
#               GENERAL FUNCTIONS
###############################################################################
###############################################################################

def safeRun(cmd, context = '', showProgress = 0, logger = None) :
	l = []
	try :
		if reallyInstall :
			(i,oe) = os.popen4(cmd)
			while 1 :
				line = oe.readline()

				if not line :
					break

				if showProgress :
					if logger :
						logger.append(line)

					print line,
					sys.stdout.flush()

				l.append(line.strip())
			oe.close()
			return l
		else :
			if logger :
				logger.append('===%s===='%context)
				logger.append(cmd)
				logger.append('=======\n')


			print '===%s===='%context
			print cmd
			print '=======\n\n'
			return []
	except Exception, inst:
		if logger :
			logger.append('Error running '+cmd)
			logger.append(str(inst))
		print 'Error running '+cmd
		print str(inst)

###############################################################################
###############################################################################

#def doRun(cmd, context = '', showProgress = 0, logger = None) :
#	f = os.popen(cmd)
#	while 1 :
#		line = f.readline()
#
#		if not line :
#			break
#
#		if showProgress :
#			if logger :
#				logger.append(line)
#
#			print line,
#
#		l.append(line)
#	f.close()
#	return l


###############################################################################
###############################################################################

def safeWriteToFile(fileName, s, logger = None) :
	try :
		context = ''
		if reallyInstall and os.access(os.path.dirname(fileName), os.W_OK) and (not os.access(fileName, os.R_OK) or os.access(fileName, os.W_OK)) :
			f = open(fileName,'w')
			f.write(s)
			f.close()
			return 1
		else :
			if reallyInstall :
				print 'Warning: file %s could not be saved.'%fileName
				logger.append('Warning: file %s could not be saved.'%fileName)
			if not context :
				context = fileName

			if logger :
				logger.append('===%s===='%context)
				logger.append(s)
				logger.append('===========\n\n')

			print '===%s===='%context
			print s
			print '===========\n\n'
			return 0
	except Exception, inst:
		if logger :
			logger.append('Error writing '+fileName)
			logger.append(str(inst))
		print 'Error writing '+fileName
		print str(inst)


###############################################################################
###############################################################################

def safeFileReadLines(fileName, logger = None) :
	try :
		fileUsed = ''

		#if reallyInstall and os.access(fileName, os.F_OK) :
		if os.access(fileName, os.F_OK) :
			fileUsed = fileName

		else :
			fileUsed = shared + 'TestingInputs/'+os.path.basename(fileName)
			if reallyInstall :
				if logger :
					logger.append('Warning: file %s could not be readed.'%fileName)
					logger.append('Using %s instead.'%fileUsed)

				print 'Warning: file %s could not be readed.'%fileName
				print 'Using %s instead.'%fileUsed

		if os.access(fileUsed, os.F_OK) :
			f = open(fileUsed)
			l = f.readlines()
			f.close()
			l = map(lambda x: x.strip(), l)
			return l
		else :
			print 'Error: file %s not found.'%fileUsed
			return []
	except Exception, inst:
		if logger :
			logger.append('Error reading '+fileName)
			logger.append(str(inst))
		print 'Error reading '+fileName
		print str(inst)



###############################################################################
###############################################################################
#               GETTING SOME DATA REQUIRED ON WIZARD
###############################################################################
###############################################################################


fullKeymapsList = \
['br-abnt2', 'dvorak', 'us', 'us-acentos',
'ANSI-dvorak', 'azerty', 'be-latin1', 'bg', 'bg-cp1251', 'br-abnt',
'br-abnt2', 'br-latin1-abnt2', 'br-latin1-us', 'by', 'cf', 'croat', 'cz',
'cz-cp1250', 'cz-lat2', 'cz-lat2-prog', 'cz-us-qwertz', 'de', 'de-latin1',
'de-latin1-nodeadkeys', 'de_CH-latin1', 'defkeymap', 'defkeymap_V1.0', 'dk',
'dk-latin1', 'dvorak', 'dvorak-l', 'dvorak-r', 'emacs', 'emacs2', 'es',
'es-cp850', 'et', 'et-nodeadkeys', 'fi', 'fi-latin1', 'fi-latin9', 'fr',
'fr-latin1', 'fr-latin9', 'fr-pc', 'fr_CH', 'fr_CH-latin1', 'gr', 'gr-pc',
'hu', 'hu101', 'il', 'il-heb', 'il-phonetic', 'is-latin1', 'it', 'it-ibm',
'it2', 'jp106', 'la-latin1', 'lt', 'lt.baltic', 'lt.l4', 'mk', 'mk-cp1251',
'mk-utf', 'mk0', 'nl', 'nl2', 'no', 'no-latin1', 'pc110', 'pl', 'pl2',
'pt-latin1', 'pt-latin9', 'ro_win', 'ru', 'ru-cp1251', 'ru-ms', 'ru-yawerty',
'ru1', 'ru2', 'ru3', 'ru4', 'ru_win', 'se-fi-ir209', 'se-fi-lat6', 'se-ir209',
'se-lat6', 'sg', 'sg-latin1', 'sg-latin1-lk450', 'sk-prog-qwerty',
'sk-prog-qwertz', 'sk-qwerty', 'sk-qwertz', 'slovene', 'speakup-jfw',
'speakupmap', 'sr-cy', 'sv-latin1', 'tr_f-latin5', 'tr_q-latin5', 'tralt',
'trf', 'trq', 'ua', 'ua-utf', 'ua-utf-ws', 'ua-ws', 'uk', 'us',
'us-acentos', 'wangbe', 'wangbe2']


###############################################################################
###############################################################################

if reallyInstall and os.access('/System/Variable/tmp/setup/keymap', os.R_OK) :
	defaultKeymap=open('/System/Variable/tmp/setup/keymap').read().strip()
else :
	defaultKeymap=open(shared+'TestingInputs/keymap').read().strip()

###############################################################################
###############################################################################

programDescriptions = {}
lines = safeFileReadLines(shared+'Information/ShortDescriptions.txt')
for line in lines :
	l = line.split('::')
	if len(l) > 1 :
		programName = l[0].strip()
		programDescriptions[programName] = l[1].strip()


###############################################################################
###############################################################################

programSizes = {}
programShowSizes = {}
lines = safeFileReadLines(shared+'Information/Programs_du.txt')
for line in lines :
	l = line.split()
	if len(l) > 1 :
		programName = l[1][2:]
		programSizes[programName] = int(l[0])
		programShowSizes[programName] = "%0.1f"%(programSizes[programName] / 1024.0)



###############################################################################
###############################################################################

lines = safeFileReadLines('/System/Settings/modprobe.conf')

cmd = 'EthInterfaces'
interfaces = safeRun(cmd)


###############################################################################
###############################################################################

devicesList = open('/System/Kernel/Status/partitions').readlines()[2:]
temp = []
for device in devicesList :
	l = device.split()
	size = int(l[2])
	if size > 1 :
		name = l[3]
		if size > 1024*1024 :
			c = name + ' (%0.1fGB)'%(size/(1024*1024.0))
		else :
			c = name + ' (%0.1fMB)'%(size/1024.0)
		temp.append(c)
devicesList = temp

import re
p = re.compile(r'\b[a-z]+[0-9]+\b')
partitionsList = filter(lambda x:p.match(x) and not 'loop' in x,devicesList)
partitionsList.sort()

d = re.compile(r'\b[a-z]+\b')
discsList = filter(lambda x:d.match(x) and not 'loop' in x,devicesList)
discsList.sort()


#partitionsList = filter(lambda x:x.find('part') > -1,devicesList)
#partitionsList.sort()

#discsList = filter(lambda x:x.find('disc') > -1,devicesList)
#discsList.sort()

###############################################################################
###############################################################################

cmd = 'cd /Programs/Glibc/Current/Shared/zoneinfo; find -type f'
locales = os.popen(cmd).readlines()
for i in range(len(locales)) :
	locales[i] = locales[i][2:].strip()
locales.sort()

###############################################################################
###############################################################################
#               DEFINING TRANSLATOR
###############################################################################
###############################################################################

if os.environ.has_key('LANG') :
	lang = os.environ['LANG']
else :
	lang = 'en_US'

t = AbsTranslator(shared+'Language/tt2_%s.ts'%(lang), lang)

#convenience

def tr(s) :
	return t.tr(s)

installer = Wizard('GoboLinux')


if not partitionsList :
	msg = tr('No valid partitions found')
	msg = msg + '\n' + tr('Create one using "qtparted" or "cfdisk"')
	print msg
	installer.showMessageBox(msg, ['Ok'])
	installer.done()
	sys.exit(1)



###############################################################################
###############################################################################
#               DEFINING WIZARD SCREENS AND CALLBACKS
###############################################################################
###############################################################################


##############################################################################
##############################################################################
introduction = Screen(tr('Welcome!'))
file=open(shared+'Language/%s/Introduction'%lang)
introduction.addMultiLineEdit('IntroText', tr('Installation process'), file.read(), tr('Read this to learn more about the installation.') )
file.close()
installer.addScreen(introduction)


##############################################################################
##############################################################################
deviceSelection = Screen(tr('Target device selection'))

deviceSelection.addList('RootPartition', tr('Root partition'), (partitionsList,''), tr('Which partition of your hard drive should the system be copied to?') )

def doFormatChanged() :
	if installer.getValue('DoFormat') :
		msg = tr('Warning, this will destroy all data in')+'\n'+installer.getValue('RootPartition')[1]
		ret = installer.showMessageBox(msg, ['Ok', 'Cancel'])
		if ret == 'Ok' :
			installer.setEnabled('PartitionType', 1)
		else :
			installer.setValue('DoFormat', 0)
	else :
		installer.setEnabled('PartitionType', 0)


deviceSelection.addBoolean('DoFormat',   tr('Format partition'), 0, tr('Erase all contents of the partition and prepare it to receive the new system?'), doFormatChanged)
deviceSelection.addList('PartitionType', tr('File system'), (['ReiserFS', 'Ext2', 'Ext3'],  'ReiserFS'), tr('Which kind of file system should be used to format the root partition.') )
deviceSelection.setEnabled('PartitionType', 0)
installer.addScreen(deviceSelection)


###############################################################################
###############################################################################
packageSelection = Screen(tr('Package selection'))

def getPackageWithsizeAndDescription(packageName) :
	tr = packageName
	if programShowSizes.has_key(packageName) :
		tr = tr + ' ('+programShowSizes[packageName]+'MB)'

	if programDescriptions.has_key(packageName) :
		tr = tr + ' - '+programDescriptions[packageName]
	return tr

def getProfilePackages(profileName) :
	if profileName == 'Full' :
		lines = os.listdir('/Programs')
	else :
		lines = safeFileReadLines(shared+'Profiles/'+profileName)
	lines = map(getPackageWithsizeAndDescription, lines)
	lines.sort()
	return lines

profiles = {}
for profileName in ['Base', 'Typical', 'Full'] :
	profiles[profileName] = getProfilePackages(profileName)

def fillUpDependencies() :
	allWithSizes,selectedWithSize = installer.getValue('Packages')
	all = map(lambda x: x.split()[0], allWithSizes)

	for basePackage in profiles['Base'] :
		if not basePackage in selectedWithSize :
			selectedWithSize.append(basePackage)

	selected = map(lambda x: x.split()[0], selectedWithSize)

	for package in selected :
		try :
			f = open("/Programs/%s/Current/Resources/Dependencies"%package)
			lines = f.readlines()
			f.close()
			for line in lines :
				l = line.split()
				if not l :
					continue
				p = l[0].strip()
				if p and not p.startswith('#') :
					if not p in selected and p in all:
						selected.append(p)
		except IOError:
			pass

	newSelectedWithSize = map(getPackageWithsizeAndDescription, selected)
	installer.setValue('Packages', (allWithSizes,newSelectedWithSize))
	showSelectedSetSize()


def showSelectedSetSize() :
	packages = map(lambda x: x.split()[0], installer.getValue('Packages')[1])
	sum = 170000 # kbytes from system (40Mb), depot (6Mb) and files (124Mb)
	for package in packages :
		if programSizes.has_key(package) :
			sum = sum + programSizes[package]
	if sum > (1024 * 1024.0) :
		s = '%0.2f'%(sum / (1024 * 1024.0)) + 'GB'
	else :
		s = '%0.1f'%(sum / (1024.0)) + 'MB'

	installer.setValue('SpaceRequired', tr('Space required: %s'%(s)))

def setProfile() :
	profileNames, profileNameAndSize = installer.getValue('Profile')
	profileName = profileNameAndSize.split()[0]
	p = installer.getValue('Packages')[0]
	installer.setValue('Packages',(p,profiles[profileName]))
	showSelectedSetSize()

packageSelection.addList('Profile', tr('Predefined sets of packages'), (['Base','Typical','Full'], 'Typical'), tr('Selecting one of these will reset the selections of the package list.'), setProfile)
packageSelection.addCheckList('Packages', tr('Select packages'), (profiles['Full'],  profiles['Typical']), tr('Mark the packages that should be installed in the system.'), showSelectedSetSize)
packageSelection.addLabel('SpaceRequired',tr('Space required: %s')%'1.5GB', '', tr('Space required to install the selected packages'))
packageSelection.addButton('',tr('Satisfy dependencies'), '', tr('Mark all packages in the list that are needed by the ones already marked.'), fillUpDependencies)
packageSelection.addBoolean('BypassFillUpDependencies', tr('Bypass dependencies checking'), 0, tr("Check if you want to install only the above selected packages."))
installer.addScreen(packageSelection)
showSelectedSetSize()


##############################################################################
##############################################################################
bootloader = Screen(tr('Bootloader options'))

def installBootloaderChanged() :
   installer.setEnabled('BootloaderTarget', installer.getValue('InstallBootloader'))

bootloader.addBoolean('InstallBootloader', tr('Install bootloader'), 1, tr("Install GRUB in the MBR of your hard disk in order to load up the system."), installBootloaderChanged)
bootloader.addList('BootloaderTarget',     tr('Install at'), (discsList,''), tr("On the MBR of which disk should the bootloader be installed.") )
#bootloader.addBoolean('EnableGraphicGRUB', tr('Boot GRUB in graphic mode'), 1, tr("Select this if you want a background image to be displayed in the bootloader screen."))
installer.addScreen(bootloader)
#installer.setEnabled('BootloaderTarget',1)


##############################################################################
##############################################################################
generalOptions = Screen(tr('General settings'))
generalOptions.addLineEdit('HostName', tr('Host name: '), 'NewMachine', tr('Write in a name to identify this computer in a network environment.') )
generalOptions.addList('KeymapLayout', tr('Keyboard map'), (fullKeymapsList, defaultKeymap), tr('Select the layout type that matches your keyboard.'), None)
generalOptions.addList('BootTheme',    tr('Boot theme'), (['Progress-II', 'AppleII', 'CheckList', 'Hat', 'Progress', 'Quotes', 'ScanDisk', 'Slack', 'SplitScreen'],'Progress-II'), tr('The appearance of the boot process can be selected here.') )
generalOptions.addList('ClockMode',    tr('BIOS clock is set in'), (['GMT','Local'], 'Local'), tr('Use local time especially if your computer dual-boots with another OS.') )
installer.addScreen(generalOptions)


##############################################################################
## Locales
##############################################################################

def updateLocaleList() :
	filterString   = installer.getValue('ZoneInfoFilter')
	selectedLocale = installer.getValue('ZoneInfo')[1]
	localesToShow  = [ l for l in locales if l.lower().find(filterString.lower()) > -1 ]
	installer.setValue('ZoneInfo',(localesToShow,selectedLocale))


# Configure known locale settings
if lang == 'pt_BR' :
	defaultZone = 'America/Sao_Paulo'
elif lang == 'hu_HU' :
	defaultZone = 'Europe/Budapest'
else :
	defaultZone = ''

localeOptions = Screen(tr('Time zone'))
localeOptions.addList('ZoneInfo', tr('Time zone'), (locales,defaultZone), tr('Select the time zone where you are at') )
localeOptions.addLineEdit('ZoneInfoFilter', tr('Filter:'),'',  tr('Narrow the selection by searching for a particular word'), updateLocaleList )

installer.addScreen(localeOptions)

##############################################################################
##############################################################################
# NET INTERFACES SCREENS
def useDHCPChanged() :
	for interface in interfaces :
		enable = not installer.getValue('BootProto'+interface)
		installer.setEnabled('IP'+interface, enable)
		installer.setEnabled('Netmask'+interface, enable)
		installer.setEnabled('Broadcast'+interface, enable)

for interface in interfaces :
	interfaceScreen = Screen(tr('Settings for network interface %s')%(interface))
	interfaceScreen.addBoolean('Automatic' + interface, tr('Enable interface on boot'), 1, tr('Should this network interface be brought up when the system is powered up?') )
	interfaceScreen.addBoolean('BootProto'+ interface,  tr('Automatic configuration via DHCP'), 0, tr('Select this if your network server is configured to use the DHCP protocol.'), useDHCPChanged )
	interfaceScreen.addLineEdit('IP'+ interface,        tr('IP:'),'192.168.1.2', tr('The IP address of this computer in your network.') )
	interfaceScreen.addLineEdit('Netmask'+ interface,   tr('Netmask:'),'255.255.255.0',  tr("Your network's netmask.") )
	interfaceScreen.addLineEdit('Broadcast'+ interface, tr('Broadcast:'), '', tr("The broadcast address of this network (optional).") )
	installer.addScreen(interfaceScreen)


##############################################################################
##############################################################################
if interfaces :
	networkOptions = Screen(tr('General network settings'))
	networkOptions.addLineEdit('Gateway',      tr('Gateway IP:'), '192.168.1.1', tr('Default gateway: the IP which redirects requests to the outside world.') )
	networkOptions.addList('GatewayInterface', tr('Gateway interface:'),(interfaces,'eth0'), tr('The network interface through which the default gateway can be reached.') )
	networkOptions.addLineEdit('PrimaryDNS',   tr('Primary DNS:'), '', tr('Primary server for solving hostnames. Contact your sysadmin or ISP for these.') )
	networkOptions.addLineEdit('SecondaryDNS', tr('Secondary DNS:'), '', tr('Fallback server for when the primary one fails to respond.') )
	installer.addScreen(networkOptions)


###############################################################################
###############################################################################
superUserScreen = Screen(tr('Super-user settings'))

def matchSuperUserPasswords() :
	if installer.getValue('SuperUserPassword') != installer.getValue('SuperUserPasswordRetyped') :
		x = installer.showMessageBox(tr('Passwords typed do not match'), ['Ok'])
		installer.setValue('SuperUserPasswordRetyped', '')
		installer.setValue('SuperUserPassword', '')
	else :
		x = installer.showMessageBox(tr('Passwords typed match'), ['Ok'])

def checkSuperUserPasswords() :
	if installer.getValue('SuperUserPassword') != installer.getValue('SuperUserPasswordRetyped') :
		x = installer.showMessageBox(tr('Passwords typed do not match'), ['Ok'])
		installer.setValue('SuperUserPasswordRetyped', '')
		installer.setValue('SuperUserPassword', '')

superUserScreen.addLineEdit('SuperUserLogin',tr('Login:'),'root', tr('Select the account name for the superuser.') )
superUserScreen.addPassword('SuperUserPassword', tr('Password:'), '', tr('Enter the password for the superuser.') )
superUserScreen.addPassword('SuperUserPasswordRetyped', tr('Retype password:'), '', tr('Enter the same password as above, to verify for typing mistakes.'), checkSuperUserPasswords )
superUserScreen.addButton('',tr('Check Password'), '', tr('Check if the above fields have the same password typed in.'), matchSuperUserPasswords)
installer.addScreen(superUserScreen)


##############################################################################
##############################################################################
usersScreen = Screen(tr('Additional users'))

addedUsers = {}

def addUser() :
	l,v = installer.getValue('Users')
	newLogin = installer.getValue('NewUserLogin')
	p = re.compile('[a-z_][a-z0-9_-]*[$]?$')
	if not p.match(newLogin) :
		installer.showMessageBox(tr('Invalid username'), ['Ok'])
		installer.setValue('NewUserPasswordRetyped', '')
		installer.setValue('NewUserPassword', '')
		return

	if installer.getValue('NewUserPassword') != installer.getValue('NewUserPasswordRetyped') :
		installer.showMessageBox(tr('Passwords typed do not match'), ['Ok'])
		installer.setValue('NewUserPasswordRetyped', '')
		installer.setValue('NewUserPassword', '')
		return

	if not newLogin or newLogin in addedUsers.keys():
		return
	newUser = {}
	newUser['Password']  = installer.getValue('NewUserPassword')  # obs: existe o parametro '-p' no useradd para passar a senha
	newUser['SuperSkel'] = installer.getValue('NewUserSuperSkel')
	newUser['FullName'] = installer.getValue('NewUserFullName')
	newUser['NewUserEnableSudo'] = installer.getValue('NewUserEnableSudo')
	#newUser['Shell']     = installer.getValue('NewUserShell')
	addedUsers[newLogin] = newUser
	l.append(newLogin)
	installer.setValue('Users',(l,v))

	installer.setValue('NewUserLogin', '')
	installer.setValue('NewUserPassword', '')
	installer.setValue('NewUserPasswordRetyped', '')
	installer.setValue('NewUserFullName', '')
	installer.setValue('NewUserEnableSudo', 0)


def removeUser() :
	l,v = installer.getValue('Users')
	if v in l :
		del addedUsers[v]
		l.remove(v)
	installer.setValue('Users',(l,''))

usersScreen.addLineEdit('NewUserLogin',          tr('Login:'), '', tr('Type here the UNIX login for the user, e.g. "johnd"'))
usersScreen.addPassword('NewUserPassword',       tr('Password:'), '', tr('Enter the password for this user.'))
usersScreen.addPassword('NewUserPasswordRetyped',tr('Retype password:'), '', tr('Enter the same password as above, to verify for typing mistakes.'))
usersScreen.addLineEdit('NewUserFullName',       tr('Full name:'), '', tr('Type here the real name of the user, e.g. "John Doe"'))
#usersScreen.addList    ('NewUserShell',          tr('Default shell'), (['ZSH', 'Bash'], 'ZSH'))
usersScreen.addBoolean ('NewUserSuperSkel',      tr('Use advanced default settings'), 1, tr("Add enhanced application settings files at the user's home directory."))
usersScreen.addBoolean ('NewUserEnableSudo',     tr('Enable super-user privileges'), 0, tr("Adds the user to the 'sys' group, enabling it to run all commands as super-user via 'sudo'"))
usersScreen.addButton  ('',                      tr('Add user'), '', tr('Create an user account using the information entered above.'), addUser)
usersScreen.addButton  ('',                      tr('Remove user'), '', tr('Remove the user that is currently selected in the list below.'), removeUser)
usersScreen.addList('Users', tr('Added users'), ([], ''), tr('This is the list of users added so far.'))
installer.addScreen(usersScreen)


##############################################################################
##############################################################################
lastScreen = Screen(tr('Ready to install'))
lastScreen.addImage('que.png')

file=open(shared+'Language/%s/Conclusion'%lang)
lastScreen.addMultiLineEdit('',tr('Done'),file.read(), tr('Continuing from here will perform all the indicated actions.'))
file.close()

installer.addScreen(lastScreen)


###############################################################################
###############################################################################
#               RUNNING WIZARD
###############################################################################
###############################################################################

#installer.showDialog(logger)
ret = installer.start()
if not ret :
	print tr("GoboLinux installation aborted")
	exit(1)

###############################################################################
###############################################################################
#               WIZARD DONE. BEGIN INSTALLATION
###############################################################################
###############################################################################


if mode == 'qt' :
	from GraphicalTail import *
	logger = GraphicalTail()

	installer.app.setMainWidget(logger.w)
	logger.w.show()
	import threading
	x = threading.Thread()
	x.run = installer.app.exec_loop
	x.start() # 'automatic' join
	#thread.start_new_thread(installer.app.exec_loop, ())
	#installer.app.exec_loop()
else :
	# with curses, printing to stdout is enough
	logger = None

# Everything inside a try: except. Better than nothing... (I think :) )
try :
	destMountPoint = '/Mount/GoboLinux/'

	def log(s) :
		s  = "\033[36m"+'=> '+s+"\033[0m"
		if logger :
			logger.append(s)
			#logger.show()

		print s
		sys.stdout.flush()

	safeRun('clear')
	safeRun('umount '+destMountPoint+' &> /dev/null')


	##############################################################################
	##############################################################################
	# Format partition
	def formatPartition(partition, fileSystem) :
		if fileSystem == 'ReiserFS' :
			#yes, two '-f's needed
			cmd = 'mkreiserfs -f -f /dev/%s'%partition

		elif fileSystem == 'Ext3' :
			cmd = 'mkfs.ext3 /dev/%s'%partition

		elif fileSystem == 'Ext2' :
			cmd = 'mkfs.ext2 /dev/%s'%partition

		#elif fileSystem == 'XFS' :
		#	cmd = 'mkfs.xfs -f -q /dev/%s'%partition
		else :
			print 'Unkown FS type: '+fileSystem
			return

		safeRun(cmd, '', 0, logger)

	if installer.getValue('DoFormat') :
		log(tr('Formating root partition %s...')%installer.getValue('RootPartition')[1])
		formatPartition(installer.getValue('RootPartition')[1].split()[0], installer.getValue('PartitionType')[1])


	##############################################################################
	##############################################################################
	# Mount partition
	log(tr('Mounting selected root partition %s...')%installer.getValue('RootPartition')[1])
	rp = installer.getValue('RootPartition')[1].split()[0]
	cmd = 'mount /System/Kernel/Devices/%s /Mount/GoboLinux'%rp
	safeRun(cmd, 'Mounting root partition', 0, logger)



	##############################################################################
	##############################################################################
	# Check out dependencies
	if not installer.getValue('BypassFillUpDependencies') :
		fillUpDependencies()


	##############################################################################
	##############################################################################
	# Create profile file containing packages to install
	log(tr('Creating temporary profile file...'))

	profiles, profileNameAndSize = installer.getValue('Profile')
	profileName = profileNameAndSize.split()[0]

	def createProfileFile(packageList) :
		o = ''
		for package in packageList :
			o += package + '\n'
		safeWriteToFile('/tmp/'+profileName, o, logger)

	createProfileFile(map(lambda x: x.split()[0], installer.getValue('Packages')[1]))


	##############################################################################
	##############################################################################
	# Call ProfileInstall
	log(tr('Performing file installation (may take a few minutes)...'))
	cmd = 'ProfileInstall --super-user %s /tmp/%s %s'%(installer.getValue('SuperUserLogin'), profileName, destMountPoint)
	safeRun(cmd, 'ProfileGen', 1, logger)


	cmd = 'mount -o bind /System/Kernel/Status /Mount/GoboLinux/System/Kernel/Status'
	safeRun(cmd, 'Binding /System/Kernel/Status', 0, logger)

	cmd = 'mount -o bind /System/Kernel/Devices/ /Mount/GoboLinux/System/Kernel/Devices'
	safeRun(cmd, 'Binding /System/Kernel/Devices', 0, logger)

	##############################################################################
	##############################################################################
 	# Create lilo.conf...
	installLilo = 'LILO' in map(lambda x: x.split()[0], installer.getValue('Packages')[1])
	try :
		if installLilo :
			log(tr('Generating LILO "lilo.conf" file...'))
			import GenLiloConf
			lilo_conf = GenLiloConf.generateLiloConfFile(installer.getValue('RootPartition')[1].split()[0])
			os.mkdir(destMountPoint+'/Programs/LILO/Settings')
			safeWriteToFile(destMountPoint+'/Programs/LILO/Settings/lilo.conf', lilo_conf, logger)
	except :
		log('Error creating lilo.conf file')


	##############################################################################
	##############################################################################
	# Create menu.lst...
	log(tr('Generating GRUB "menu.lst" file...'))

	import GenGrubMenu
	selectedWithSize = installer.getValue('Packages')[1]
	selected = map(lambda x: x.split()[0], selectedWithSize)

	menu_lst = GenGrubMenu.generateGrubMenuFile(installer.getValue('RootPartition')[1].split()[0], installer.getValue('KeymapLayout')[1], 'KDE-Base' in selected)
	safeWriteToFile(destMountPoint+'/System/Kernel/Boot/grub/menu.lst', menu_lst, logger)


	##############################################################################
	# Install GRUB...
	def installGrub(targetDisc, targetPartition) :
		o = ''
		o += 'root %s'%GenGrubMenu.devToGrub(targetPartition) + '\n'
		o += 'setup --prefix=/System/Kernel/Boot/grub %s'%GenGrubMenu.devToGrub(targetDisc) + '\n'

		safeWriteToFile('/tmp/GRUB_INPUT', o, logger)
		cmd = 'grub --batch < /tmp/GRUB_INPUT'
		safeRun(cmd, 'grub install', 0, logger)

	if installer.getValue('InstallBootloader') :
		log(tr('Installing GRUB in %s...')%installer.getValue('BootloaderTarget')[1].split()[0])
		installGrub(installer.getValue('BootloaderTarget')[1].split()[0], installer.getValue('RootPartition')[1].split()[0])


	##############################################################################
	# Create Options file...
	log('Creating "BootOptions" file...')

	def generateOptionsFile() :
		comments = {}
		comments['BootTheme'] = '#BootTheme=AppleII\n#BootTheme=CheckList\n#BootTheme=Hat\n#BootTheme=LPP\n#BootTheme=Progress\n#BootTheme=Quotes\n#BootTheme=ScanDisk\n#BootTheme=Slack\n#BootTheme=SplitScreen'
		comments['ClockMode'] = '#ClockMode=GMT\n#ClockMode=LocalTime'

		comments['KeymapLayout'] = '#KeymapLayout=br-abnt2\n#KeymapLayout=us\n#KeymapLayout=dvorak.map'
		#comments['MouseDevice']  = '#MouseType=ps2\n#MouseType=imps2\n#MouseType=ms'
		#comments['MouseType']    = '#MouseDevice=/dev/misc/psaux\n#MouseDevice=/dev/tts/0'

		comments['Modules'] = """
# If you need to load a module on boot, use the array below.
# However, be warned that the correct way to load modules
# is using the load-on-demand facilities of /etc/modprobe.conf.
# For example: to set the module for your network card, you
# only need to add a line like
#     alias eth0 via-rhine
# to /etc/modprobe.conf. To load your ALSA sound module, use
#     alias sound-slot-0 snd-via82xx
# (replacing the module names above by those that match your
# hardware, of course).

#UserDefinedModules=(
#   "example_module1"
#   "example_module2 parameter1=value parameter2=value"
#)
"""

		o = ''

		if (installer.getValue('HostName')) :
			o += 'HostName' + '=' + installer.getValue('HostName') + '\n\n'
		else :
			o += comments['HostName'] + '\n\n'

		# clockmode is a special case...
		o += comments['ClockMode'] + '\n'
		if (installer.getValue('ClockMode')) :
			if installer.getValue('ClockMode') == 'GMT' :
				o += 'ClockMode=GMT' + '\n\n'
			else :
				o += 'ClockMode=LocalTime' + '\n\n'

		o += comments['BootTheme'] + '\n'
		if (installer.getValue('BootTheme')) :
			o += 'BootTheme' + '=' + str(installer.getValue('BootTheme')[1]) + '\n'

		o += '\n'
		o += comments['KeymapLayout'] + '\n'
		if (installer.getValue('KeymapLayout')) :
			o += 'KeymapLayout' + '=' + str(installer.getValue('KeymapLayout')[1])+'.map' + '\n'
		o += '\n'

		mouseLines = MouseInfo.getMouseOptions('BootOptions')
		o += mouseLines
		o += 'ConsoleFont=/Files/Fonts/Console/lode-lat1u-16.psf.gz' + '\n'
		o += comments['Modules']

		safeWriteToFile(destMountPoint+'/Programs/BootScripts/Settings/BootOptions', o, logger)

	def generateNetworkFile() :
		comments = {}
		comments['HostName']  = '#Hostname=NewMachine'
		comments['Gateway']         = '#Gateway=192.168.2.1'
		comments['GatewayInterface'] = '#GatewayInterface=eth0'
		comments['NetworkInterfaces'] = """
lo_IP=127.0.0.1
lo_Netmask=255.0.0.0
"""
		o = ''

		o += 'NetworkInterfacesOnBoot=('+'\n'+'   lo'+'\n'
		for interface in interfaces :
			if installer.getValue('Automatic'+interface) :
				o += '   '+interface + '\n'
		o += ')\n'

		o += comments['NetworkInterfaces']
		for interface in interfaces :
			if installer.getValue('BootProto'+interface) :
				o += interface+'_'+'BootProto=DHCP'+ '   # DHCP (requires DHCPCD package), Static (default if empty)\n'
			else :
				o += '#'+interface+'_'+'BootProto=Static'+ '   # DHCP (requires DHCPCD package), Static (default if empty)\n'

			fieldsT = [ 'IP', 'Netmask', 'Broadcast' ]
			for field in fieldsT :
				if installer.isEnabled(field+interface) :
					if (installer.getValue(field+interface)) :
						o += interface+'_'+field+ '=' + installer.getValue(field+interface)+ '\n'
					else :
						o += "#"+interface+'_'+field+'='

		o += '\n'
		if (installer.getValue('Gateway')) :
			o += 'Gateway' + '=' + installer.getValue('Gateway') + '\n'
		else :
			o += comments['Gateway'] + '\n'

		if (installer.getValue('GatewayInterface')) :
			o += 'GatewayInterface' + '=' + str(installer.getValue('GatewayInterface')[1]) + '\n'
		else :
			o += comments['GatewayInterface'] + '\n'

		safeWriteToFile(destMountPoint+'/Programs/BootScripts/Settings/NetworkOptions', o, logger)

	generateOptionsFile()
	generateNetworkFile()


	##############################################################################
	##############################################################################
	# Put hostname inside /etc/hosts
	log(tr('Creating /System/Settings/hosts...'))
	o = '127.0.0.1 localhost.localdomain localhost %s\n'%installer.getValue('HostName')
	safeWriteToFile(destMountPoint+'/System/Settings/hosts', o, logger)


	##############################################################################
	##############################################################################
	# Put DNS inside /etc/resolv.conf
	log(tr('Creating /System/Settings/resolv.conf...'))
	o = ''
	if installer.getValue('PrimaryDNS') :
		o += 'nameserver %s\n'%installer.getValue('PrimaryDNS')
	else :
		o += 'nameserver 200.199.241.17\n'

	if installer.getValue('SecondaryDNS') :
		o += 'nameserver %s\n'%installer.getValue('SecondaryDNS')
	else :
		o += 'nameserver 200.199.252.68\n'

	safeWriteToFile(destMountPoint+'/System/Settings/resolv.conf', o, logger)


	##############################################################################
	##############################################################################
	# Create fstab
	log(tr('Generating /System/Settings/fstab...'))
	cmd = 'GenFstab > %s/System/Settings/fstab'%destMountPoint
	safeRun(cmd, 'fstab generation', 0, logger)

	lines = safeFileReadLines(destMountPoint+'/System/Settings/fstab', logger)
	#lines = map(string.strip,lines)

	lines = filter(lambda x:x and x[0] != '#' and x.find('/Mount/') > -1,lines)
	mountList = map(lambda x:x.split()[1], lines)
	for m in mountList :
		if reallyInstall :
			if not os.access(destMountPoint+m, os.F_OK) :
				os.mkdir(destMountPoint+m)
		else :
			print 'mkdir '+destMountPoint+m


	##############################################################################
	##############################################################################
	# Set superuser password
	log(tr('Setting superuser login and password...'))
	if installer.getValue('SuperUserPassword') == installer.getValue('SuperUserPasswordRetyped') :
		shadowLines = safeFileReadLines(destMountPoint+'/System/Settings/shadow', logger)

		index = 0
		for i, line in enumerate(shadowLines) :
			if line.find('gobo') > -1 :
				index = i

		goboLine = shadowLines[index]
		goboLineList = goboLine.split(':')

		goboLogin = installer.getValue('SuperUserLogin')
		goboLineList[0] = goboLogin

		goboOldPassword = goboLineList[1]
		uncriptedNewPassword = installer.getValue('SuperUserPassword')
		salt = goboOldPassword[:2]
		criptedNewPassword = crypt.crypt(uncriptedNewPassword, salt)
		goboLineList[1] = criptedNewPassword
		goboLine = string.join(goboLineList,':')

		shadowLines[index] = goboLine
		o = string.join(shadowLines,'\n')
		safeWriteToFile(destMountPoint+'/System/Settings/shadow', o, logger)

		cmd = 'chroot %s GrepReplace "gobo" "%s" /etc/passwd /etc/group /Programs/Sudo/Settings/sudoers'%(destMountPoint,goboLogin)
		safeRun(cmd, '', 0, logger)

		cmd = 'chroot %s rm -f /etc/passwd~ /etc/group~ /Programs/Sudo/Settings/sudoers~'%destMountPoint
		safeRun(cmd, '', 0, logger)

	else :
		print 'Warning: keeping default superuser password: "gobo" (passwords typed do not match)'
		salt = 'LE'


	##############################################################################
	##############################################################################
	# Create regular users with AddUser
	log(tr('Creating user accounts...'))
	for login in addedUsers.keys() :
		log(tr('Creating account for user %s...')%login)
		cmd = 'chroot %s AddUser'%destMountPoint
		cmd = cmd + ' -f "'+addedUsers[login]['FullName'].strip()+'" '
		cmd = cmd + ' -p '+ crypt.crypt(addedUsers[login]['Password'], salt)

		if addedUsers[login]['SuperSkel'] :
			cmd = cmd + ' --skel'

		cmd = cmd + ' ' + login
		safeRun(cmd, '', 0, logger)
		if addedUsers[login]['NewUserEnableSudo'] :
			cmd = 'chroot %s usermod -G sys %s'%(destMountPoint,login)
			safeRun(cmd, '', 0, logger)
		elif addedUsers[login]['SuperSkel'] :
			cmd = 'chroot %s rm -f /Users/%s/Desktop/Manager.desktop'%(destMountPoint,login)
			safeRun(cmd, '', 0, logger)


	##############################################################################
	##############################################################################
	# Set Default Language on Bootscripts Env file
	log(tr('Setting default locale settings...'))

	o = 'LANG=%s\nLC_ALL=%s\n'%(lang,lang)

	safeWriteToFile(destMountPoint+'/Programs/BootScripts/Current/Resources/Environment', o, logger)
	safeRun('chroot '+destMountPoint+' SymlinkProgram BootScripts', 'LANG', 0, logger)

	##############################################################################
	##############################################################################
	# Zoneinfo
	log(tr('Setting zoneinfo...'))
	safeRun('chroot '+destMountPoint+' ln -sfn /Programs/Glibc/Current/Shared/zoneinfo/%s /Programs/Glibc/Settings/localtime'%installer.getValue('ZoneInfo')[1], 'zoneinfo', 0, logger)

	##############################################################################
	##############################################################################
	# [OK]: x11
	#if os.access(destMountPoint+'/Programs/Xorg/Settings/X11/', os.W_OK) :
	#	log(tr('Updating X11 config file...'))
	#	safeRun('cp -fL /System/Settings/X11/xorg.conf %s/Programs/Xorg/Settings/X11/xorg.conf'%destMountPoint)


	##############################################################################
	##############################################################################
	# makewhatis
	try :
	    	if os.access(destMountPoint+'/Programs/Man', os.F_OK) :
			log(tr('Creating "whatis" database...'))
			cmd = 'chroot %s makewhatis -w'%destMountPoint
			safeRun(cmd)
	except :
		log(tr('Error creating "whatis" database.'))

	##############################################################################
	##############################################################################
	# ssh keys gereneration

	#if os.access(destMountPoint+'/Programs/OpenSSH/', os.R_OK) :
	if 0 :
		try :
			log(tr('Generating new OpenSSH keys...'))
			cmd = "chroot %s generatessh-keygen -q -t rsa1 -f /Programs/OpenSSH/Settings/ssh/ssh_host_key -C '' -N ''"%destMountPoint
			safeRun(cmd, 0, logger)
			cmd = "chroot %s ssh-keygen -q -t rsa -f /Programs/OpenSSH/Settings/ssh/ssh_host_rsa_key -C '' -N ''"%destMountPoint
			safeRun(cmd, 0, logger)
			cmd = "chroot %s ssh-keygen -q -t dsa -f /Programs/OpenSSH/Settings/ssh/ssh_host_dsa_key -C '' -N ''"%destMountPoint
			safeRun(cmd, 0, logger)
		except :
			log(tr('Error generating OpenSSH keys.'))

	##############################################################################
	##############################################################################
	# Unmounting mount point
	cmd = 'umount /Mount/GoboLinux/System/Kernel/Status'
	safeRun(cmd, 'Unbinding /System/Kernel/Status', 0, logger)

	cmd = 'umount /Mount/GoboLinux/System/Kernel/Devices'
	safeRun(cmd, 'Unbinding /System/Kernel/Devices', 0, logger)

	log(tr('Unmounting selected root partition %s...')%installer.getValue('RootPartition')[1])
	safeRun('umount '+destMountPoint)


	##############################################################################
	##############################################################################
	# debug
	#if not reallyInstall :
	#	log(tr('Testing Graphic Tail (may take a few minutes)...'))
	#	cmd = 'du -h /Programs --max-depth=1'
	#	doRun(cmd, 'ProfileGen', 1, logger)


	##############################################################################
	##############################################################################
	# Done message
	log(tr("That's it!"))
	log(tr("You should now be able to reboot and enjoy the GoboLinux experience. :)"))

	if not reallyInstall :
		log(tr('Warning: wizard was run in test mode.'))
		log(tr('Run "GoboLinuxInstaller [qt|curses] install" to perform installation.'))

	if logger :
		logger.enableOk()

except Exception, inst :
	x = '\033[1;31mGoboLinux installation failed.'+'\n'+'Check /tmp/GoboLinuxInstall.log.\033[0m'
	y = 'Error: '+str(inst)
	print x
	print y
	if logger :
		logger.append(x)
		logger.append(y)
		logger.enableOk()

