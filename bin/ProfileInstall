#!/bin/sh

source ScriptFunctions
Import GoboLinux
Import Log
Import OptionParser
Import Process

source GoboPath

###############################################################################
#                                                 
# GoboLinux ProfileInstall              
#                                                 
# Created by: Guilherme Baslestiri Bedin (gbedin) 
#             gbedin@gobolinux.org                
#                                                 
###############################################################################

### Changelog #################################################################
#
# [16/05/2005] - [lucasvr] wrote installKernel and prepareCPUID functions
# [18/01/2005] - [detsch] super-user option, udev
# [13/11/2003] - [detsch] Comented-out the SymlinkProgram after each package 
#
# [16/10/2003] - Andre Detsch (detsch)
#      - misc fixes, mostly on /Users/gobo/ 
#
# [15/10/2003] - Andre Detsch (detsch)
#      - minor spell
#      - Cloop directory
#
# [14/10/2003] - Guilherme Balestieri Bedin (gbedin)
#      - Remove broken links with chroot      
#
# [10/10/2003] - Andre Detsch (detsch)
#      - minor changes/fixes
#
# [05/08/2003] - Guilherme Balestieri Bedin (gbedin)
#      - remove broken links at /System at the end of the installation
#
# [29/08/2003] - Guilherme Balestieri Bedin (gbedin)
#      - First version  
# 


### Options ###################################################################

scriptDescription="Install a set of GoboLinux packages, localized at /Programs, in a target directory, generally a new GoboLinux installation."
scriptCredits="Copyright (C) 2003. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="<profile> <destination_directory>"
scriptExample="Base /Mount/GoboLinux"
scriptNotes="This script is used on the distribution installation process, to install a single package on a GoboLinux system use InstallPackage instead."
#Add_Option_Entry "p" "profile" "A file containing the packages that are part of this Profile, one per line."
Add_Option_Entry "s" "super-user" "Super-user's login." "gobo"


Parse_Options "$@"
shift $parsedArguments

### Operation #################################################################

Verify_Superuser

#superUser=gobo

profile="$1"
dest_dir="$2"
if [ ! $dest_dir ]
then
     Log
fi
#normalStream=/dev/stderr

#Is_Entry "profile" && profile="`Entry profile`"

Is_Entry "super-user" && superuser="`Entry super-user`" || superuser='gobo'

function installKernel() {
    # detect whether we are running on a SMP/HT machine or not
	CPUS=$(cat /proc/cpuinfo | grep ^processor | wc -l)
    if [ $CPUS = 1 ]; then
        SMP=0
    else
        SMP=1
    fi
    
    pushd ${dest_dir}/${goboSystem}/Kernel/Boot &> /dev/null
    KERNEL=`readlink kernel`
    SYSMAP=`readlink System.map`

    lsmod | grep sd_mod && {
    	# SCSI disk found, replace the current kernel image by the SCSI one

		if [ $SMP = 1 ]; then
		    ln -fs ${KERNEL}-SMP-SCSI kernel
	    	ln -fs ${SYSMAP}-SMP-SCSI System.map
		else
		    ln -fs ${KERNEL}-SCSI kernel
	    	ln -fs ${SYSMAP}-SCSI System.map
		fi
    } || {
    	# SCSI disk not found, keep using the non-SCSI images

		if [ $SMP = 1 ]; then
		    ln -fs ${KERNEL}-SMP kernel
		    ln -fs ${SYSMAP}-SMP System.map
		else
		    ln -fs ${KERNEL} kernel
		    ln -fs ${SYSMAP} System.map
		fi
    }
    popd &> /dev/null
}

function installBase() {
    
    Log_Normal "Creating directory "${goboSystem}
    mkdir ${dest_dir}/${goboSystem}
    
    Log_Normal "Installing directory "${goboSystem}/Settings
    cp -ra ${goboSystem}/Settings  ${dest_dir}/${goboSystem}
    sync
    
    Log_Normal "Installing directory "${goboSystem}/Variable
    cp -ra ${goboSystem}/Variable  ${dest_dir}/${goboSystem} 2> /dev/null
    rm -rf ${dest_dir}/${goboSystem}/Variable/run/*
    #rm -rf ${dest_dir}/${goboSystem}/Variable/tmp/*  &> /dev/null
    sync
    
    Log_Normal "Installing directory "${goboSystem}/Links
    cp -ra ${goboSystem}/Links  ${dest_dir}/${goboSystem}
    sync
    
    Log_Normal "Installing directory "${goboSystem}/Kernel
    mkdir ${dest_dir}/${goboSystem}/Kernel
    mkdir ${dest_dir}/${goboSystem}/Kernel/Devices
    mkdir ${dest_dir}/${goboSystem}/Kernel/Objects
    mkdir ${dest_dir}/${goboSystem}/Kernel/Status

    Log_Normal "Installing directory "${goboSystem}/Kernel/Boot
    cp -ra ${goboSystem}/Kernel/Boot  ${dest_dir}/${goboSystem}/Kernel
    installKernel
    sync
    
    Log_Normal "Installing directory "${goboSystem}/Kernel/Modules
    cp -ra ${goboSystem}/Kernel/Modules  ${dest_dir}/${goboSystem}/Kernel    
    sync
    
    Log_Normal "Installing directory "${goboMount}
    mkdir ${dest_dir}/${goboMount}
    mkdir ${dest_dir}/${goboMount}/CD-ROM
    mkdir ${dest_dir}/${goboMount}/Floppy
    mkdir ${dest_dir}/${goboMount}/SquashFS
    
    Log_Normal "Installing legacy directory "/usr
    cp -ra /usr ${dest_dir}/usr
    sync
    
    Log_Normal "Installing directory "/Files
    cp -ra /Files ${dest_dir}/Files
	sync
    
    Log_Normal "Creating "/Depot
    mkdir ${dest_dir}/Depot/
    sync
    
    Log_Normal "Installing legacy links on "${dest_dir}
    cp -a /bin /dev /etc /lib /proc /sbin /sys /tmp /var ${dest_dir}
    
    Log_Normal "Installing directory "${goboUsers}/${superuser}
    mkdir -p ${dest_dir}/${goboUsers}
    cp -a ${goboPrograms}/EnhancedSkel/Current/Shared/EnhancedSkel/Default ${dest_dir}/${goboUsers}/${superuser} || mkdir ${dest_dir}/${goboUsers}/${superuser} 
    chmod 600 ${dest_dir}/${goboUsers}/${superuser}/

    cd ${dest_dir}/${goboUsers}/${superuser}
    GrepReplace -R "/Users/testuser" "${goboUsers}/${superuser}/"
	cat /Users/gobo/.zshrc | grep -v "Installer" > .zshrc
    cd - &> /dev/null
    
    sync
    mkdir -p ${dest_dir}/System/Variable/tmp/{.ICE-unix,.X11-unix} -m a+rwxt 
    
    Log_Normal "Creating directory "${goboPrograms}
    mkdir ${dest_dir}/${goboPrograms}

    installPackages    
    Log_Normal "Creating dev nodes"
    mknod -m 600 ${dest_dir}/System/Kernel/Devices/console c 5 1
    mknod -m 666 ${dest_dir}/System/Kernel/Devices/null    c 1 3
}

function installPackages() {
    while read line
    do
	Log_Normal "Installing program: $line"
	if [ -d  ${goboPrograms}/${line} ]
	then
		cp -ra ${goboPrograms}/${line} ${dest_dir}/${goboPrograms}
		
		if [ -d ${goboPrograms}/${line}/Current/Resources/Defaults/Settings ]
		then
			rm -rf ${dest_dir}/${goboPrograms}/${line}/Settings &> /dev/null
			cp -ra ${goboPrograms}/${line}/Current/Resources/Defaults/Settings ${dest_dir}/${goboPrograms}/${line}
		fi
		
		if [ -d ${dest_dir}/${goboPrograms}/${line}/Resources/Defaults/Daemons ] 
		then
		    rm -rf ${dest_dir}/${goboPrograms}/${line}/Current/Resources/Daemons &> /dev/null
                    cp -ra ${dest_dir}/${goboPrograms}/${line}/Resources/Defaults/Daemons ${dest_dir}/${goboPrograms}/${line}/Current/Resources
		fi
		sync
	#	SymlinkProgram ${line} &> /dev/null
	fi
    done < ${profile}
}

### Main ####################################################################

if [ ! -z ${profile}  ] && [ -r ${profile} ]
then
	if [ ! -z ${dest_dir} ] && [ -d ${dest_dir} ]
	then
		if [ -d ${dest_dir}/${goboSystem} ] 
		then 
	    		installPackages
		else 
	    		installBase
		fi
		Log_Normal "Removing broken links from ${dest_dir}${goboLinks}"
		chroot ${dest_dir}  find ${goboLinks} > /tmp/Links
		chroot ${dest_dir}  RemoveBroken < /tmp/Links &> /dev/null
		chroot ${dest_dir}  rm -f /tmp/Links
		Log_Normal "Removing broken links from ${dest_dir}/${goboSettings}"
		chroot ${dest_dir}  find ${goboSettings} > /tmp/Links
		chroot ${dest_dir}  RemoveBroken < /tmp/Links &> /dev/null
		chroot ${dest_dir}  rm -f /tmp/Links
		chroot ${dest_dir} ldconfig 
	else 
		echo "The install directory \"${dest_dir}\" don't exists or isn't a directory."
	fi
else
	echo "Please inform the profile file. --help for more information."
fi

